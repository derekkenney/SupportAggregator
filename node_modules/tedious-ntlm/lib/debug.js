// Generated by CoffeeScript 1.6.2
var Debug, EventEmitter, util,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

EventEmitter = require('events').EventEmitter;

util = require('util');

Debug = (function(_super) {
  __extends(Debug, _super);

  /*
    @options    Which debug details should be sent.
                  data    - dump of packet data
                  payload - details of decoded payload
  */


  function Debug(options) {
    this.options = options;
    this.options = this.options || {};
    this.options.data = this.options.data || false;
    this.options.payload = this.options.payload || false;
    this.options.packet = this.options.packet || false;
    this.options.token = this.options.token || false;
    this.indent = '  ';
  }

  Debug.prototype.packet = function(direction, packet) {
    if (this.haveListeners() && this.options.packet) {
      this.log('');
      this.log(direction);
      //return this.log(packet.headerToString(this.indent));
	  return this.hexDump(packet.buffer);
    }
  };
  
	Debug.prototype.hexDump = function(data) {
		var outputString = new String();
		var addressPadding = "0000000";
		var line = 0;
		var countForCurrentLine = 0;
	   
		outputString +=
				"Address   0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f \n" +
				"---------------------------------------------------------\n" +
				"00000000  ";
	   
	    var charLine = "| ";
		for (var i=0; i < data.length; i++) {
				countForCurrentLine++
				var byteData = data.readInt8(i);
				var number = data.readInt8(i) & 0xff;
				var asciiChar = (number > 31) && (number <  127) ? String.fromCharCode(number): ".";
				charLine += asciiChar;
				var byteHex = (number < 16) ? "0" + number.toString(16) : number.toString(16);
				outputString += byteHex + " ";
				if (countForCurrentLine == 16) {
						countForCurrentLine = 0;
						line++;
						outputString +=  charLine + " |\n" + addressPadding.substr(0, 7 - line.toString(16).length) + line.toString(16) + "0  ";
						charLine = "| ";
						
				}
		}
		
		while ( countForCurrentLine < 16 ) {
			outputString += "   ";
			charLine += " ";
			countForCurrentLine++;
		}
		
		outputString += charLine + " |\n";
		
		this.log(outputString);
		
		return outputString;
	}
	
  Debug.prototype.data = function(packet) {
    if (this.haveListeners() && this.options.data) {
      return this.log(packet.dataToString(this.indent));
    }
  };

  Debug.prototype.payload = function(generatePayloadText) {
    if (this.haveListeners() && this.options.payload) {
      return this.log(generatePayloadText());
    }
  };

  Debug.prototype.token = function(token) {
    if (this.haveListeners() && this.options.token) {
      return this.log(util.inspect(token, false, 5, true));
    }
  };

  Debug.prototype.haveListeners = function() {
    return this.listeners('debug').length > 0;
  };

  Debug.prototype.log = function(text) {
    return this.emit('debug', text);
  };

  return Debug;

})(EventEmitter);

module.exports = Debug;
